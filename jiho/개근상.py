n = int(input())
div = 1_000_000

dp = [[[0] * 3 for _ in range(2)] for _ in range(n + 1)]
# (날짜, 누적 지각 횟수, 현재 연속 결석 횟수)
# (누적 지각 횟수, 연속 결석 횟수) 조합은 아래와 같아질 수 있음
# [0] (0,0)
# [1] (0,1)
# [2] (0,2)
# [3] (1,0)
# [4] (1,1)
# [5] (1,2)

# 1일차
dp[1][0][0] = 1  # 출석
dp[1][1][0] = 1  # 지각
dp[1][0][1] = 1  # 결석

# 2일차 이상
for d in range(2, n + 1):
    # 이전에 누적 지각 횟수가 0이기만 하면 모두 가능
    dp[d][0][0] = (dp[d - 1][0][0] + dp[d - 1][0][1] + dp[d - 1][0][2]) % div

    # 이전에 누적 지각 횟수가 0이면서, 이전에 연속 결석 횟수가 0이면 됨
    dp[d][0][1] = dp[d - 1][0][0]

    # 이전에 누적 지각 횟수가 0이면서, 이전에 연속 결석 횟수가 1이면 됨
    dp[d][0][2] = dp[d - 1][0][1]

    # 지금 출석하는 경우 - 이전에 지각 한 번 해놨어야 함.
    dp[d][1][0] = (dp[d - 1][1][0] + dp[d - 1][1][1] + dp[d - 1][1][2]) % div
    # 지금 지각하는 경우 - 이전에 지각 한 번도 안 했어야 함.
    dp[d][1][0] = (
        dp[d][1][0] + dp[d - 1][0][0] + dp[d - 1][0][1] + dp[d - 1][0][2]
    ) % div

    # 지금 반드시 결석해야 함 - 이전에 지각 누적 1회이면서, 연속 결석 횟수가 0이면 됨
    dp[d][1][1] = dp[d - 1][1][0]

    # 지금 반드시 결석해야 함 - 이전에 지각 누적 1회이면서, 연속 결석 횟수가 1이면 됨
    dp[d][1][2] = dp[d - 1][1][1]

ans = (
    dp[n][0][0] + dp[n][0][1] + dp[n][0][2] + dp[n][1][0] + dp[n][1][1] + dp[n][1][2]
) % div

print(ans)
